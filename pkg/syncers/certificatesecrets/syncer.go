package certificatesecrets

import (
	context2 "context"
	"fmt"
	certmanagerv1 "github.com/cert-manager/cert-manager/pkg/apis/certmanager/v1"
	"github.com/loft-sh/vcluster-sdk/clienthelper"
	"github.com/loft-sh/vcluster-sdk/syncer"
	"github.com/loft-sh/vcluster-sdk/syncer/context"
	"github.com/loft-sh/vcluster-sdk/syncer/translator"
	"github.com/loft-sh/vcluster-sdk/translate"
	"k8s.io/apimachinery/pkg/api/equality"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/source"
	"strings"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/builder"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
)

var (
	IndexByCertificateSecretCert = "indexbycertificatesecretcert"

	certificateSecrets        = "cert-manager-certificate"
	certificateNameAnnotation = "cert-manager.io/certificate-name"
)

func New(ctx *context.RegisterContext) syncer.Base {
	return &secretSyncer{
		NamespacedTranslator: translator.NewNamespacedTranslator(ctx, "certificate-secret", &corev1.Secret{}),

		virtualClient:  ctx.VirtualManager.GetClient(),
		physicalClient: ctx.PhysicalManager.GetClient(),
	}
}

type secretSyncer struct {
	translator.NamespacedTranslator

	virtualClient  client.Client
	physicalClient client.Client
}

var _ syncer.IndicesRegisterer = &secretSyncer{}

func (s *secretSyncer) RegisterIndices(ctx *context.RegisterContext) error {
	err := ctx.VirtualManager.GetFieldIndexer().IndexField(ctx.Context, &certmanagerv1.Certificate{}, IndexByCertificateSecretCert, func(rawObj client.Object) []string {
		return secretNamesFromCertificate(rawObj.(*certmanagerv1.Certificate))
	})
	if err != nil {
		return err
	}

	return nil
}

var _ syncer.ControllerModifier = &secretSyncer{}

func (s *secretSyncer) ModifyController(ctx *context.RegisterContext, builder *builder.Builder) (*builder.Builder, error) {
	builder = builder.Watches(&source.Kind{Type: &certmanagerv1.Certificate{}}, handler.EnqueueRequestsFromMapFunc(mapCertificates))
	return builder, nil
}

func (s *secretSyncer) SyncDown(ctx *context.SyncContext, vObj client.Object) (ctrl.Result, error) {
	vSecret := vObj.(*corev1.Secret)

	// delete secret
	if vSecret.Labels != nil && vSecret.Labels[translate.ControllerLabel] == certificateSecrets {
		ctx.Log.Infof("delete secret %s/%s because we are the controlling party, but secret is not needed anymore", vSecret.Namespace, vSecret.Name)
		return ctrl.Result{}, ctx.VirtualClient.Delete(ctx.Context, vSecret)
	}

	return ctrl.Result{}, nil
}

func (s *secretSyncer) Sync(ctx *context.SyncContext, pObj client.Object, vObj client.Object) (ctrl.Result, error) {
	vSecret := vObj.(*corev1.Secret)
	if vSecret.Labels == nil || vSecret.Labels[translate.ControllerLabel] != certificateSecrets {
		return ctrl.Result{}, nil
	}

	pSecret := pObj.(*corev1.Secret)
	if equality.Semantic.DeepEqual(pSecret.Data, vSecret.Data) && vSecret.Type == pSecret.Type {
		return ctrl.Result{}, nil
	}

	// update secret if necessary
	vSecret.Data = pSecret.Data
	vSecret.Type = pSecret.Type
	ctx.Log.Infof("update virtual secret %s/%s because phyiscal secret has changed", vSecret.Namespace, vSecret.Name)
	return ctrl.Result{}, ctx.VirtualClient.Update(ctx.Context, vSecret)
}

var _ syncer.UpSyncer = &secretSyncer{}

func (s *secretSyncer) SyncUp(ctx *context.SyncContext, pObj client.Object) (ctrl.Result, error) {
	vName := s.nameByCertificate(pObj)
	if vName.Name == "" {
		return ctrl.Result{}, nil
	}

	pSecret := pObj.(*corev1.Secret)
	vSecret := &corev1.Secret{
		ObjectMeta: metav1.ObjectMeta{
			Name:        vName.Name,
			Namespace:   vName.Namespace,
			Annotations: pSecret.Annotations,
			Labels:      map[string]string{},
		},
		Data: pSecret.Data,
		Type: pSecret.Type,
	}
	for k, v := range pSecret.Labels {
		vSecret.Labels[k] = v
	}
	vSecret.Labels[translate.ControllerLabel] = certificateSecrets
	ctx.Log.Infof("create virtual secret %s/%s because physical certificate secret exists", vSecret.Namespace, vSecret.Name)
	return ctrl.Result{}, ctx.VirtualClient.Create(ctx.Context, vSecret)
}

func (s *secretSyncer) nameByCertificate(pObj client.Object) types.NamespacedName {
	// check if the secret was generated by a certificate that belongs to the vcluster
	if pObj.GetAnnotations() != nil && pObj.GetAnnotations()[certificateNameAnnotation] != "" {
		vCertificate := &certmanagerv1.Certificate{}
		err := clienthelper.GetByIndex(context2.TODO(), s.virtualClient, vCertificate, translator.IndexByPhysicalName, pObj.GetAnnotations()[certificateNameAnnotation])
		if err == nil && vCertificate.Name != "" {
			name := vCertificate.Name
			if vCertificate.Spec.SecretName != "" {
				name = vCertificate.Spec.SecretName
			}

			return types.NamespacedName{
				Name:      name,
				Namespace: vCertificate.Namespace,
			}
		}
	}

	return types.NamespacedName{}
}

func (s *secretSyncer) PhysicalToVirtual(pObj client.Object) types.NamespacedName {
	namespacedName := s.NamespacedTranslator.PhysicalToVirtual(pObj)
	if namespacedName.Name != "" {
		return namespacedName
	}

	return s.nameByCertificate(pObj)
}

func (s *secretSyncer) removeController(ctx *context.SyncContext, vSecret *corev1.Secret) error {
	// remove us as owner
	if vSecret.Labels != nil && vSecret.Labels[translate.ControllerLabel] == certificateSecrets {
		delete(vSecret.Labels, translate.ControllerLabel)
		ctx.Log.Infof("update secret %s/%s because we the controlling party, but secret is not needed anymore", vSecret.Namespace, vSecret.Name)
		return ctx.VirtualClient.Update(ctx.Context, vSecret)
	}

	return nil
}

func (s *secretSyncer) switchController(ctx *context.SyncContext, vSecret *corev1.Secret) (bool, error) {
	// check if we own the secret
	if vSecret.Labels == nil || vSecret.Labels[translate.ControllerLabel] == "" {
		if vSecret.Labels == nil {
			vSecret.Labels = map[string]string{}
		}
		vSecret.Labels[translate.ControllerLabel] = certificateSecrets
		ctx.Log.Infof("update secret %s/%s because we are not the controlling party", vSecret.Namespace, vSecret.Name)
		return true, ctx.VirtualClient.Update(ctx.Context, vSecret)
	} else if vSecret.Labels[translate.ControllerLabel] != certificateSecrets {
		return true, nil
	}

	return false, nil
}

func (s *secretSyncer) isSecretUsed(ctx *context.SyncContext, vObj runtime.Object) (bool, error) {
	secret, ok := vObj.(*corev1.Secret)
	if !ok || secret == nil {
		return false, fmt.Errorf("%#v is not a secret", vObj)
	}

	certificateList := &certmanagerv1.CertificateList{}
	err := ctx.VirtualClient.List(ctx.Context, certificateList, client.MatchingFields{IndexByCertificateSecretCert: secret.Namespace + "/" + secret.Name})
	if err != nil {
		return false, err
	} else if meta.LenList(certificateList) > 0 {
		return true, nil
	}

	return false, nil
}

func secretNamesFromCertificate(certificate *certmanagerv1.Certificate) []string {
	secrets := []string{}
	// Do not include certificate.Spec.SecretName here as this will be handled separately by a different controller
	if certificate.Spec.SecretName != "" {
		secrets = append(secrets, certificate.Namespace+"/"+certificate.Spec.SecretName)
	} else {
		secrets = append(secrets, certificate.Namespace+"/"+certificate.Name)
	}
	return secrets
}

func mapCertificates(obj client.Object) []reconcile.Request {
	certificate, ok := obj.(*certmanagerv1.Certificate)
	if !ok {
		return nil
	}

	requests := []reconcile.Request{}
	names := secretNamesFromCertificate(certificate)
	for _, name := range names {
		splitted := strings.Split(name, "/")
		if len(splitted) == 2 {
			requests = append(requests, reconcile.Request{
				NamespacedName: types.NamespacedName{
					Namespace: splitted[0],
					Name:      splitted[1],
				},
			})
		}
	}

	return requests
}
